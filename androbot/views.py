import aiogram.types as aiotypes

from . import actions
from .errors import NoNewQuestionsException
from .templates import get_template, render_message
from .types_ import AnswerTypes, View


def get_main_menu() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å—Ç–∞—Ä–∞—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ—Ç–∞
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for speciality in actions.get_main_menu():
        btn_1 = aiotypes.KeyboardButton(f"‚úÖ {speciality}")
        reply_kb.add(btn_1)

    return View(get_template("start"), reply_kb)


def get_hello_message(username: str) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±–æ—Ç–∞ - –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    return View(render_message(get_template("hello"), username=username))


def get_android_developer_init_view(answer_type: str) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ê–Ω–¥—Ä–æ–∏–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(aiotypes.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∞"), aiotypes.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤!"))

    if answer_type == AnswerTypes.TEXT.value:
        answer_way = "–æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞"
    elif answer_type == AnswerTypes.VOICE.value:
        answer_way = "–æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"

    answer_text = render_message(get_template("android_developer"), answer_way=answer_way)

    return View(answer_text, reply_kb)


def get_select_answer_type_view() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å, –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for answer_type in actions.start_new_test():
        btn = aiotypes.KeyboardButton(answer_type)
        reply_kb.add(btn)

    return View(get_template("select_answer_type"), reply_kb)


def get_next_question(tg_user_id: int, answer_type: str) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        with actions.Actions() as act:
            question = act.get_next_test(tg_user_id)

    except NoNewQuestionsException:
        reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        reply_kb.add(aiotypes.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        return View("–í –±–∞–∑–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", reply_kb)

    if answer_type == AnswerTypes.TEXT.value:
        call_to_action = "—Ç–µ–∫—Å—Ç–æ–º"
    elif answer_type == AnswerTypes.VOICE.value:
        call_to_action = "–≥–æ–ª–æ—Å–æ–º"

    answer_text = render_message(
        get_template("question"),
        question=question.text_question.strip(),
        question_category=question.question_category.strip(),
        call_to_action=call_to_action,
    )

    row_buttons = [aiotypes.KeyboardButton("–ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å")]

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(*row_buttons)

    return View(answer_text, reply_kb, question.id)


def get_do_not_understand_question() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –ø—Ä–æ—Å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.add(aiotypes.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    return View(get_template("do_not_understand"), reply_kb)


def get_why_do_not_understand() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –ø—Ä–æ—Å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.add(aiotypes.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    reply_kb.add(aiotypes.KeyboardButton("–†–µ—à–∏—Ç—å –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É"))

    return View(get_template("why_do_not_understand"), reply_kb)


def get_correct_answer(tg_user_id: int) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    """
    with actions.Actions() as act:
        correct_answer = act.get_test_result(tg_user_id).text_answer.strip()

    if not correct_answer:
        correct_answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"

    answer_text = render_message(get_template("correct_answer"), correct_answer=correct_answer)

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.add(aiotypes.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    reply_kb.add(aiotypes.KeyboardButton("–†–µ—à–∏—Ç—å –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É"))

    return View(answer_text, reply_kb)
