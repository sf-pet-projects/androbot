import aiogram.types as aiotypes

from .actions import Actions, get_main_menu, start_new_test
from .errors import NoNewQuestionsException
from .templates import get_template, render_message
from .types_ import AnswerTypes, DialogueStates, View


def get_hello_message(username: str) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±–æ—Ç–∞ - –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    return View(render_message(get_template("01_hello"), username=username))


def get_main_menu_view() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å—Ç–∞—Ä–∞—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ—Ç–∞
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for speciality in get_main_menu():
        btn_1 = aiotypes.KeyboardButton(f"‚úÖ {speciality}")
        reply_kb.add(btn_1)

    return View(get_template("02_start"), reply_kb)


def get_do_you_want_to_reset_test_view() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—á–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç, –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    row_buttons = [
        aiotypes.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        aiotypes.KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞"),
        aiotypes.KeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
    ]
    reply_kb.row(*row_buttons)

    return View(get_template("03_do_you_want_to_reset_test"), reply_kb)


def get_resetting_test_view() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View –≤ –∫–æ—Ç–æ—Ä–æ–º —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–±—Ä–æ—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    return View(get_template("04_resetting_test"))


def get_select_answer_type_view() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å, –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
    """
    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    row_buttons = []
    for answer_type in reversed(start_new_test()):
        btn = aiotypes.KeyboardButton(answer_type)
        row_buttons.append(btn)
    reply_kb.row(*row_buttons)

    return View(get_template("05_select_answer_type"), reply_kb)


def get_are_you_ready_for_test_view(answer_type: str) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ê–Ω–¥—Ä–æ–∏–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    """
    if answer_type == AnswerTypes.TEXT.value:
        answer_way = "–æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞"
    elif answer_type == AnswerTypes.VOICE.value:
        answer_way = "–æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
    answer_text = render_message(get_template("09_are_you_ready_for_test"), answer_way=answer_way)

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(aiotypes.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∞"), aiotypes.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤!"))

    return View(answer_text, reply_kb)


def get_next_question(tg_user_id: int, answer_type: str) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        with Actions() as act:
            question = act.get_next_test(tg_user_id)

    except NoNewQuestionsException:
        return View("–í –±–∞–∑–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")

    if answer_type == AnswerTypes.TEXT.value:
        call_to_action = "—Ç–µ–∫—Å—Ç–æ–º"
    elif answer_type == AnswerTypes.VOICE.value:
        call_to_action = "–≥–æ–ª–æ—Å–æ–º"

    answer_text = render_message(
        get_template("20_question"),
        question=question.text_question.strip(),
        question_category=question.question_category.strip(),
        call_to_action=call_to_action,
    )

    row_buttons = [
        aiotypes.KeyboardButton("ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å"),
        aiotypes.KeyboardButton("üôÖüèª‚Äç‚ôÄÔ∏è –ù–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç"),
    ]

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(*row_buttons)

    return View(answer_text, reply_kb, question.id)


def get_why_do_not_understand() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –ø—Ä–æ—Å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ
    """
    return View(get_template("31_why_do_not_understand"))


def get_correct_answer(tg_user_id: int) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    """
    with Actions() as act:
        current_question = act.get_current_question(tg_user_id)
        correct_answer = current_question.text_answer.strip().replace("_", "\\_")
        question_score = act.get_question_score(current_question.id, tg_user_id)

    if not correct_answer:
        answer_text = render_message(get_template("40_no_correct_answer"))
    else:
        answer_text = render_message(get_template("41_correct_answer"), correct_answer=correct_answer)

    if not correct_answer or question_score:
        row_buttons = [
            aiotypes.KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
            aiotypes.KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"),
        ]
        state = DialogueStates.NO_ANSWER
    else:
        row_buttons = [
            aiotypes.KeyboardButton("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π"),
            aiotypes.KeyboardButton("‚öñÔ∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã–π"),
            aiotypes.KeyboardButton("‚úÖ –í–µ—Ä–Ω—ã–π"),
        ]
        state = DialogueStates.GOT_ANSWER

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(*row_buttons)

    return View(answer_text, reply_kb, state=state)


def get_do_you_want_additional_materials_view() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –ø—Ä–µ–¥–æ–ª–∂–µ–Ω–∏–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    """

    answer_text = render_message(get_template("42_do_you_want_additional_materials"))

    row_buttons = [
        aiotypes.KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        aiotypes.KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"),
    ]

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(*row_buttons)

    return View(answer_text, reply_kb)


def get_additional_materials_view(tg_user_id: int) -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    """
    with Actions() as act:
        additional_info = act.get_current_question(tg_user_id).additional_info.strip().replace("_", "\\_")

    if not additional_info:
        additional_info = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
    else:
        additional_info = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è...\n{additional_info}\n"

    answer_text = render_message(get_template("46_additional_materials"), additional_info=additional_info)

    row_buttons = [
        aiotypes.KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"),
    ]

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(*row_buttons)

    return View(answer_text, reply_kb)


def get_do_you_want_to_get_correct_answer() -> View:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç View —Å –ø—Ä–µ–¥–æ–ª–∂–µ–Ω–∏–µ–º —É–∑–Ω–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏–ª–∏ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ
    """

    answer_text = render_message(get_template("45_do_you_want_to_get_correct_answer"))

    row_buttons = [
        aiotypes.KeyboardButton("üí° –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"),
        aiotypes.KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"),
    ]

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(*row_buttons)

    return View(answer_text, reply_kb)


def get_user_score_view(user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç view –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    with Actions() as act:
        user_scores = act.get_all_questions_scores(user_id)

    # –î–µ–ª–∏–º –Ω–∞ 2 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —ç—Ç–æ 2, —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã–π 1
    user_score = int(sum(x.score for x in user_scores) / len(user_scores) / 2 * 100)

    if user_score > 84:
        user_score_description = get_template("52_result_excelent")
    elif user_score > 69:
        user_score_description = get_template("53_result_good")
    else:
        user_score_description = get_template("54_result_bad")

    answer_text = render_message(
        get_template("51_user_score"), user_score=user_score, user_score_description=user_score_description
    )

    row_buttons = [
        aiotypes.KeyboardButton("üëç –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞"),
        aiotypes.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ]

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(*row_buttons)

    return View(answer_text, reply_kb)


def get_bot_score_view():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç view –æ—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞
    """

    answer_text = get_template("55_bot_score")

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.row(aiotypes.KeyboardButton("1"), aiotypes.KeyboardButton("2"), aiotypes.KeyboardButton("3"))
    reply_kb.row(aiotypes.KeyboardButton("4"), aiotypes.KeyboardButton("5"), aiotypes.KeyboardButton("6"))
    reply_kb.row(
        aiotypes.KeyboardButton("7"),
        aiotypes.KeyboardButton("8"),
        aiotypes.KeyboardButton("9"),
        aiotypes.KeyboardButton("10"),
    )

    return View(answer_text, reply_kb)


def get_bot_review_view():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç view –¥–ª—è –æ—Ç–∑—ã–≤–∞ –æ –±–æ—Ç–µ
    """
    return View(get_template("56_bot_review"))


def get_finish_view():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç view –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    """
    answer_text = get_template("60_finish")

    reply_kb = aiotypes.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reply_kb.add(aiotypes.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    return View(answer_text, reply_kb)
